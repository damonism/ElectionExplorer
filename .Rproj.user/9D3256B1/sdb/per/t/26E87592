{
    "contents" : "library(shiny)\nlibrary(leaflet)\n\n# ui <- fluidPage(\n#   title = \"Election Results\",\n#   titlePanel(\"Election Results\"),\n#   sidebarLayout(\n#     sidebarPanel(\n#       radioButtons(\"polling_place_markers\", \"Polling Place Markers\",\n#                    choices = list(\"Two Party Preferred\" = \"tpp\", \"Coalition Primary\" = \"coa\", \"ALP Primary\" = \"alp\", \"Greens Primary\" = \"grn\"),\n#                    selected = \"tpp\"),\n#       checkboxGroupInput(\"boundaries\", lable = h3(\"Boundaries\"),\n#                          choices = list(\"2016 Notional Margin\" = \"margin\", \"2016 Boundary\" = \"outline\"),\n#                          selected = \"margin\")\n#     ),\n#     mainPanel(\n#       leafletOutput(\"map\")\n#     )\n#   )\n# )\n\nui <- fluidPage(\n  titlePanel(\"Election Results\"),\n  \n  sidebarLayout(\n    sidebarPanel(\"sidebar panel\",\n          radioButtons(\"polling_place_markers\", \"Polling Place Markers\",\n                       choices = list(\"Two Party Preferred\" = \"tpp\", \"Coalition Primary\" = \"coa\", \"ALP Primary\" = \"alp\", \"Greens Primary\" = \"grn\"),\n                       selected = \"tpp\"),\n          checkboxGroupInput(\"boundaries\", lable = h3(\"Boundaries\"),\n                             choices = list(\"2016 Notional Margin\" = \"margin\", \"2016 Boundary\" = \"outline\"),\n                             selected = \"margin\")\n    ),    \n    mainPanel(\n      leafletOutput(\"map\", height = \"100%\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  output$map <- renderLeaflet({\n    leaflet(boundaries_new_2016) %>% \n      addProviderTiles(\"CartoDB.Positron\") %>% \n      fitBounds(~min(tcp_party_pp$Longitude), ~min(tcp_party_pp$Latitude), ~max(tcp_party_pp$Longitude), ~max(tcp_party_pp$Latitude))\n\n  })\n  \n  \n  ##\n  ## Draw the boundaries as filled polygons shaded by margin\n  ##\n  \n  observe({\n    \n    content_alp <- paste(\n      \"<b>\", boundaries_2016_alp$ELECT_DIV, \"</b><br />\",\n      \"Notional Party:\", boundaries_2016_alp$Notional, \"<br />\",\n      \"Notional Margin:\", round(boundaries_2016_alp$Margin, digits = 1), \"<br />\",\n      \"Held By:\", boundaries_2016_alp$HeldBy, \"<br />\"\n    )\n    \n    content_coalition <- paste(\n      \"<b>\", boundaries_2016_coalition$ELECT_DIV, \"</b><br />\",\n      \"Notional Party:\", boundaries_2016_coalition$Notional, \"<br />\",\n      \"Notional Margin:\", round(boundaries_2016_coalition$Margin, digits = 1), \"<br />\",\n      \"Held By:\", boundaries_2016_coalition$HeldBy, \"<br />\"\n    )\n    \n    content_nonclassic <- paste(\n      \"<b>\", boundaries_2016_nonclassic$ELECT_DIV, \"</b><br />\",\n      \"Notional Party:\", boundaries_2016_nonclassic$Notional, \"<br />\",\n      \"Notional Margin:\", round(boundaries_2016_nonclassic$Margin, digits = 1), \"<br />\",\n      \"Held By:\", boundaries_2016_nonclassic$HeldBy, \"<br />\"\n    )\n    \n    \n    pal_coalition <- colorNumeric(\n      palette = \"Blues\", \n      domain = boundaries_new_2016$Margin\n    )\n    \n    pal_alp <- colorNumeric(\n      palette = \"Reds\", \n      domain = boundaries_new_2016$Margin\n    )\n    \n    pal_nonclassic <- colorNumeric(\n      palette = \"Greens\",\n      domain = boundaries_new_2016$Margin\n    )  \n\n    leafletProxy(\"map\", data = boundaries_2016_alp) %>% \n      addPolygons(color = ~pal_alp(boundaries_2016_alp$Margin), popup = content_alp, \n                  stroke = FALSE, fillOpacity = 0.7, group = \"Notional Margin\")\n    leafletProxy(\"map\", data = boundaries_2016_coalition) %>% \n      addPolygons(color = ~pal_coalition(boundaries_2016_coalition$Margin), popup = content_coalition, \n                  stroke = FALSE, fillOpacity = 0.7, group = \"Notional Margin\")\n    leafletProxy(\"map\", data = boundaries_2016_nonclassic) %>% \n      addPolygons(color = ~pal_nonclassic(boundaries_2016_nonclassic$Margin), popup = content_nonclassic, \n                  stroke = FALSE, fillOpacity = 0.7, group = \"Notional Margin\")\n  })\n  \n  ##\n  ## Draw the two-party preferred polling place markers\n  ##\n  \n  observe({\n    pal_pp_alp <- colorNumeric(\n      palette = \"Reds\",\n      domain = tcp_pp_alp$tppPercentALP\n    )\n    \n    pal_pp_coa <- colorNumeric(\n      palette = \"Blues\",\n      domain = tcp_pp_coa$tppPercentCOA\n    )\n    \n    content_tcp_alp <- paste(\n      \"<b>\", tcp_pp_alp$PollingPlace, \" (\", tcp_pp_alp$PremisesSuburb, \", \", tcp_pp_alp$PremisesStateAb, \")</b><br />\",\n      \"ALP primary vote: \", tcp_pp_alp$ALP, \" (\", round(tcp_pp_alp$PercentALP, digits = 1), \"%)<br />\",\n      \"ALP Two Party Preferred: \", round(tcp_pp_alp$tppPercentALP * 100, digits = 1), \"%<br />\",\n      \"Coalition primary vote: \", tcp_pp_alp$COA, \" (\", round(tcp_pp_alp$PercentCOA, digits = 1), \"%)<br />\",\n      \"Coalition Two Party Preferred: \", round(tcp_pp_alp$tppPercentCOA * 100, digits = 1), \"%<br />\",\n      \"Greens primary vote: \", tcp_pp_alp$GRN, \" (\", round(tcp_pp_alp$PercentGRN, digits = 1), \"%)<br />\",\n      \"Total votes: \", tcp_pp_alp$TotalVotes, \"<br />\",\n      sep = \"\"\n    )\n    \n    content_tcp_coa <- paste(\n      \"<b>\", tcp_pp_coa$PollingPlace, \" (\", tcp_pp_coa$PremisesSuburb, \", \", tcp_pp_coa$PremisesStateAb, \")</b><br />\",\n      \"ALP primary vote: \", tcp_pp_coa$ALP, \" (\", round(tcp_pp_coa$PercentALP, digits = 1), \"%)<br />\",\n      \"ALP Two Party Preferred: \", round(tcp_pp_coa$tppPercentALP * 100, digits = 1), \"%<br />\",\n      \"Coalition primary vote: \", tcp_pp_coa$COA, \" (\", round(tcp_pp_coa$PercentCOA, digits = 1), \"%)<br />\",\n      \"Coalition Two Party Preferred: \", round(tcp_pp_coa$tppPercentCOA * 100, digits = 1), \"%<br />\",\n      \"Greens primary vote: \", tcp_pp_coa$GRN, \" (\", round(tcp_pp_coa$PercentGRN, digits = 1), \"%)<br />\",\n      \"Total votes: \", tcp_pp_coa$TotalVotes, \"<br />\",\n      sep = \"\"\n    )\n    \n    leafletProxy(\"map\", data = tcp_pp_alp ) %>% \n      addCircleMarkers(popup = content_tcp_alp, color = ~pal_pp_alp(tcp_pp_alp$tppPercentALP), stroke = FALSE, \n                       radius = 4, fillOpacity = 0.6, group = \"Two Party Preferred\")\n    \n    leafletProxy(\"map\", data = tcp_pp_coa ) %>% \n      addCircleMarkers(popup = content_tcp_coa, color = ~pal_pp_coa(tcp_pp_coa$tppPercentCOA), stroke = FALSE, \n                       radius = 4, fillOpacity = 0.6, group = \"Two Party Preferred\")\n    \n  })\n}\n\n\n\nshinyApp(ui, server)",
    "created" : 1463618257044.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2058371370",
    "id" : "26E87592",
    "lastKnownWriteTime" : 1463634664,
    "path" : "//home4/mullerd$/My Documents/Data/Electoral Map 2016/app.R",
    "project_path" : "app.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}